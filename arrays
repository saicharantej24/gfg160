1)Second Largest

Given an array of positive integers arr[], return the second largest element from the array. If the second largest element doesn't exist then return -1.

Note: The second largest element should not be equal to the largest element.

Examples:

Input: arr[] = [12, 35, 1, 10, 34, 1]
Output: 34
Explanation: The largest element of the array is 35 and the second largest element is 34.
Input: arr[] = [10, 5, 10]
Output: 5

java PROg:
class Solution {
    public int getSecondLargest(int[] arr) {
        int maxi=Integer.MIN_VALUE;
        int maxi2=Integer.MIN_VALUE;
        int n=arr.length;
        for(int i=0;i<n;i++)
        {
            if(arr[i]>maxi && arr[i]!=maxi2)
            {
                maxi2=maxi;
                maxi=arr[i];
            }
            else if(arr[i]>maxi2 && arr[i]!=maxi)
            {
                maxi2=arr[i];
            }
        }
        if(maxi2!=Integer.MIN_VALUE)return maxi2;
        else
        return -1;
    }
}
----------------------------------------------------------------------------------
2)Move All Zeroes to End
Given an array arr[]. Push all the zeros of the given array to the right end of the array while maintaining the order of non-zero elements. Do the mentioned change in the array in place.

Examples:

Input: arr[] = [1, 2, 0, 4, 3, 0, 5, 0]
Output: [1, 2, 4, 3, 5, 0, 0, 0]
Explanation: There are three 0s that are moved to the end.
JAVA PROG:
class Solution {
    void pushZerosToEnd(int[] arr) {
        int n = arr.length;
        int ng = 0; 
       
        for (int i = 0; i < n; i++) {
           
            if (arr[i] != 0) {
               
                if (i != ng) {
                    arr[ng] = arr[i]; 
                }
                ng++;  
            }
        }
        
        for (int i = ng; i < n; i++) {
            arr[i] = 0;
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------
3)Reverse an Array
You are given an array of integers arr[]. Your task is to reverse the given array.

Examples:

Input: arr = [1, 4, 3, 2, 6, 5]
Output: [5, 6, 2, 3, 4, 1]
PROGRAM:
class Solution {
    void swap(int arr[],int l,int r)
    {
        int temp=arr[r];
        arr[r]=arr[l];
        arr[l]=temp;
    
    }
    public void reverseArray(int arr[]) {
        // code here
        int n=arr.length;
        int l=0,r=n-1;
        while(l<r)
        {
            swap(arr,l,r);
            l++;
            r--;
        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------
4)Rotate Array


Given an unsorted array arr[]. Rotate the array to the left (counter-clockwise direction) by d steps, where d is a positive integer. Do the mentioned change in the array in place.

Note: Consider the array as circular.

Examples :

Input: arr[] = [1, 2, 3, 4, 5], d = 2
Output: [3, 4, 5, 1, 2]
Explanation: when rotated by 2 elements, it becomes 3 4 5 1 2.
class Solution {
    static void reverse(int arr[],int l,int r)
    {
        while(l<r)
        {
            int temp=arr[r];
            arr[r]=arr[l];
            arr[l]=temp;
            l++;
            r--;
        }
    }
    // Function to rotate an array by d elements in counter-clockwise direction.
    static void rotateArr(int arr[], int d) {
        // add your code here
        int l=0;
        int n=arr.length;
        d=d%n;
        reverse(arr,0,n-1);
        reverse(arr,0,n-d-1);
        reverse(arr,n-d,n-1);
        
    }
}
---------------------------------------------------------------------------------------------------------------------------
